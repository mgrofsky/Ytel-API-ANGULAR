/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('PhoneNumberController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        PhoneNumberController
    ]);

    function PhoneNumberController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Get DID Score Number
             *
             * @param {string} phonenumber Specifies the multiple phone numbers for check updated spamscore .
             *
             * @return {promise<String>}
             */
            createGetDIDScore: function (phonenumber) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/getdidscore.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Phonenumber': phonenumber
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Transfer phone number that has been purchased for from one account to another account.
             *
             * @param {string} phonenumber A valid 10-digit Ytel number (E.164 format).
             * @param {string} fromaccountsid A specific Accountsid from where Number is getting transfer.
             * @param {string} toaccountsid A specific Accountsid to which Number is getting transfer.
             *
             * @return {promise<String>}
             */
            createMoveNumber: function (phonenumber, fromaccountsid, toaccountsid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/transferphonenumbers.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'phonenumber': phonenumber,
                    'fromaccountsid': fromaccountsid,
                    'toaccountsid': toaccountsid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Purchase a phone number to be used with your Ytel account
             *
             * @param {string} phoneNumber A valid 10-digit Ytel number (E.164 format).
             *
             * @return {promise<String>}
             */
            createPurchaseNumber: function (phoneNumber) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/buynumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Remove a purchased Ytel number from your account.
             *
             * @param {string} responseType Response type format xml or json
             * @param {string} phoneNumber A valid 10-digit Ytel number (E.164 format).
             *
             * @return {promise<String>}
             */
            createReleaseNumber: function (responseType, phoneNumber) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/releasenumber.{ResponseType}';
                
                // Process template parameters
                _queryBuilder = APIHelper.appendUrlWithTemplateParameters(_queryBuilder, {
                    'ResponseType': responseType
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve the details for a phone number by its number.
             *
             * @param {string} phoneNumber A valid Ytel 10-digit phone number (E.164 format).
             *
             * @return {promise<String>}
             */
            createViewDetails: function (phoneNumber) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/viewnumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Remove a purchased Ytel number from your account.
             *
             * @param {string} phoneNumber A valid Ytel comma separated numbers (E.164 format).
             *
             * @return {promise<String>}
             */
            createBulkRelease: function (phoneNumber) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/massreleasenumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of available phone numbers that can be purchased and used for your Ytel account.
             *
             * @param {NumbertypeEnum} numbertype Number type either SMS,Voice or all
             * @param {string} areacode Specifies the area code for the returned list of available numbers. Only
             * available for North American numbers.
             * @param {int|null} pagesize [Optional] The count of objects to return.
             *
             * @return {promise<String>}
             */
            createAvailableNumbers: function (numbertype, areacode, pagesize) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/availablenumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'numbertype': (numbertype !== null) ? numbertype : null,
                    'areacode': areacode,
                    'pagesize': pagesize
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Update properties for a Ytel number that has been purchased for your account. Refer to the parameters
             * list for the list of properties that can be updated.
             *
             * @param {string} phoneNumber A valid Ytel number (E.164 format).
             * @param {string} voiceUrl URL requested once the call connects
             * @param {string|null} friendlyName [Optional] Phone number friendly name description
             * @param {string|null} voiceMethod [Optional] Post or Get
             * @param {string|null} voiceFallbackUrl [Optional] URL requested if the voice URL is not available
             * @param {string|null} voiceFallbackMethod [Optional] Post or Get
             * @param {string|null} hangupCallback [Optional] callback url after a hangup occurs
             * @param {string|null} hangupCallbackMethod [Optional] Post or Get
             * @param {string|null} heartbeatUrl [Optional] URL requested once the call connects
             * @param {string|null} heartbeatMethod [Optional] URL that can be requested every 60 seconds during
             * the call to notify of elapsed time
             * @param {string|null} smsUrl [Optional] URL requested when an SMS is received
             * @param {string|null} smsMethod [Optional] Post or Get
             * @param {string|null} smsFallbackUrl [Optional] URL used if any errors occur during execution of
             * InboundXML from an SMS or at initial request of the SmsUrl.
             * @param {string|null} smsFallbackMethod [Optional] The HTTP method Ytel will use when URL requested
             * if the SmsUrl is not available.
             *
             * @return {promise<String>}
             */
            updateNumber: function (phoneNumber,
                voiceUrl,
                friendlyName,
                voiceMethod,
                voiceFallbackUrl,
                voiceFallbackMethod,
                hangupCallback,
                hangupCallbackMethod,
                heartbeatUrl,
                heartbeatMethod,
                smsUrl,
                smsMethod,
                smsFallbackUrl,
                smsFallbackMethod)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/updatenumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber,
                    'VoiceUrl': voiceUrl,
                    'FriendlyName': friendlyName,
                    'VoiceMethod': voiceMethod,
                    'VoiceFallbackUrl': voiceFallbackUrl,
                    'VoiceFallbackMethod': voiceFallbackMethod,
                    'HangupCallback': hangupCallback,
                    'HangupCallbackMethod': hangupCallbackMethod,
                    'HeartbeatUrl': heartbeatUrl,
                    'HeartbeatMethod': heartbeatMethod,
                    'SmsUrl': smsUrl,
                    'SmsMethod': smsMethod,
                    'SmsFallbackUrl': smsFallbackUrl,
                    'SmsFallbackMethod': smsFallbackMethod
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of purchased phones numbers associated with your Ytel account.
             *
             * @param {int|null} page [Optional] Which page of the overall response will be returned. Page indexing
             * starts at 1.
             * @param {int|null} pageSize [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {NumberType14Enum|null} numberType [Optional] The capability supported by the number.Number
             * type either SMS,Voice or all
             * @param {string|null} friendlyName [Optional] A human-readable label added to the number object.
             *
             * @return {promise<String>}
             */
            createListNumbers: function (page, pageSize, numberType, friendlyName) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/listnumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Page': page,
                    'PageSize': pageSize,
                    'NumberType': (numberType !== null) ? numberType : null,
                    'FriendlyName': friendlyName
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Update properties for a Ytel numbers that has been purchased for your account. Refer to the
             * parameters list for the list of properties that can be updated.
             *
             * @param {string} phoneNumber A valid comma(,) separated Ytel numbers. (E.164 format).
             * @param {string} voiceUrl The URL returning InboundXML incoming calls should execute when connected.
             * @param {string|null} friendlyName [Optional] A human-readable value for labeling the number.
             * @param {string|null} voiceMethod [Optional] Specifies the HTTP method used to request the VoiceUrl
             * once incoming call connects.
             * @param {string|null} voiceFallbackUrl [Optional] URL used if any errors occur during execution of
             * InboundXML on a call or at initial request of the voice url
             * @param {string|null} voiceFallbackMethod [Optional] Specifies the HTTP method used to request the
             * VoiceFallbackUrl once incoming call connects.
             * @param {string|null} hangupCallback [Optional] URL that can be requested to receive notification
             * when and how incoming call has ended.
             * @param {string|null} hangupCallbackMethod [Optional] The HTTP method Ytel will use when requesting
             * the HangupCallback URL.
             * @param {string|null} heartbeatUrl [Optional] URL that can be used to monitor the phone number.
             * @param {string|null} heartbeatMethod [Optional] The HTTP method Ytel will use when requesting the
             * HeartbeatUrl.
             * @param {string|null} smsUrl [Optional] URL requested when an SMS is received.
             * @param {string|null} smsMethod [Optional] The HTTP method Ytel will use when requesting the SmsUrl.
             * @param {string|null} smsFallbackUrl [Optional] URL used if any errors occur during execution of
             * InboundXML from an SMS or at initial request of the SmsUrl.
             * @param {string|null} smsFallbackMethod [Optional] The HTTP method Ytel will use when URL requested
             * if the SmsUrl is not available.
             *
             * @return {promise<String>}
             */
            createBulkUpdateNumbers: function (phoneNumber,
                voiceUrl,
                friendlyName,
                voiceMethod,
                voiceFallbackUrl,
                voiceFallbackMethod,
                hangupCallback,
                hangupCallbackMethod,
                heartbeatUrl,
                heartbeatMethod,
                smsUrl,
                smsMethod,
                smsFallbackUrl,
                smsFallbackMethod)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/massupdatenumber.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'PhoneNumber': phoneNumber,
                    'VoiceUrl': voiceUrl,
                    'FriendlyName': friendlyName,
                    'VoiceMethod': voiceMethod,
                    'VoiceFallbackUrl': voiceFallbackUrl,
                    'VoiceFallbackMethod': voiceFallbackMethod,
                    'HangupCallback': hangupCallback,
                    'HangupCallbackMethod': hangupCallbackMethod,
                    'HeartbeatUrl': heartbeatUrl,
                    'HeartbeatMethod': heartbeatMethod,
                    'SmsUrl': smsUrl,
                    'SmsMethod': smsMethod,
                    'SmsFallbackUrl': smsFallbackUrl,
                    'SmsFallbackMethod': smsFallbackMethod
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Purchase a selected number of DID's from specific area codes to be used with your Ytel account.
             *
             * @param {NumberType15Enum} numberType The capability the number supports.
             * @param {string} areaCode Specifies the area code for the returned list of available numbers. Only
             * available for North American numbers.
             * @param {string} quantity A positive integer that tells how many number you want to buy at a time.
             * @param {string|null} leftover [Optional] If desired quantity is unavailable purchase what is
             * available .
             *
             * @return {promise<String>}
             */
            createBulkBuyNumbers: function (numberType, areaCode, quantity, leftover) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/incomingphone/bulkbuy.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'NumberType': (numberType !== null) ? numberType : null,
                    'AreaCode': areaCode,
                    'Quantity': quantity,
                    'Leftover': leftover
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
