/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('ConferenceController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        ConferenceController
    ]);

    function ConferenceController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Play an audio file during a conference.
             *
             * @param {string} conferenceSid The unique identifier for a conference object.
             * @param {string} participantSid The unique identifier for a participant object.
             * @param {AudioUrlEnum} audioUrl The URL for the audio file that is to be played during the conference.
             * Multiple audio files can be chained by using a semicolon.
             *
             * @return {promise<String>}
             */
            createPlayAudio: function (conferenceSid, participantSid, audioUrl) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/playAudio.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid,
                    'ParticipantSid': participantSid,
                    'AudioUrl': (audioUrl !== null) ? audioUrl : null
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Remove a participant from a conference.
             *
             * @param {string} participantSid The unique identifier for a participant object.
             * @param {string} conferenceSid The unique identifier for a conference object.
             *
             * @return {promise<String>}
             */
            createHangupParticipant: function (participantSid, conferenceSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/hangupParticipant.json';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'ParticipantSid': participantSid
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve information about a conference by its ConferenceSid.
             *
             * @param {string} conferenceSid The unique identifier of each conference resource
             *
             * @return {promise<String>}
             */
            createViewConference: function (conferenceSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/viewconference.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve information about a participant by its ParticipantSid.
             *
             * @param {string} conferenceSid The unique identifier for a conference object.
             * @param {string} participantSid The unique identifier for a participant object.
             *
             * @return {promise<String>}
             */
            createViewParticipant: function (conferenceSid, participantSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/viewParticipant.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid,
                    'ParticipantSid': participantSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Deaf Mute Participant
             *
             * @param {string} conferenceSid ID of the active conference
             * @param {string} participantSid ID of an active participant
             * @param {bool|null} muted [Optional] Mute a participant
             * @param {bool|null} deaf [Optional] Make it so a participant cant hear
             *
             * @return {promise<String>}
             */
            createSilenceParticipant: function (conferenceSid, participantSid, muted, deaf) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/deafMuteParticipant.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'conferenceSid': conferenceSid,
                    'ParticipantSid': participantSid,
                    'Muted': muted,
                    'Deaf': deaf
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Add Participant in conference
             *
             * @param {string} conferenceSid The unique identifier for a conference object.
             * @param {string} participantNumber The phone number of the participant to be added.
             * @param {bool|null} muted [Optional] Specifies if participant should be muted.
             * @param {bool|null} deaf [Optional] Specifies if the participant should hear audio in the conference.
             *
             * @return {promise<String>}
             */
            addParticipant: function (conferenceSid, participantNumber, muted, deaf) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/addParticipant.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid,
                    'ParticipantNumber': participantNumber,
                    'Muted': muted,
                    'Deaf': deaf
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Here you can experiment with initiating a conference call through Ytel and view the request response
             * generated when doing so.
             *
             * @param {string} url URL requested once the conference connects
             * @param {string} from A valid 10-digit number (E.164 format) that will be initiating the conference
             * call.
             * @param {string} to A valid 10-digit number (E.164 format) that is to receive the conference call.
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once call connects.
             * @param {string|null} statusCallBackUrl [Optional] URL that can be requested to receive notification
             * when call has ended. A set of default parameters will be sent
             * here once the conference is finished.
             * @param {string|null} statusCallBackMethod [Optional] Specifies the HTTP methodlinkclass used to
             * request StatusCallbackUrl.
             * @param {string|null} fallbackUrl [Optional] URL requested if the initial Url parameter fails or
             * encounters an error
             * @param {string|null} fallbackMethod [Optional] Specifies the HTTP method used to request the
             * required FallbackUrl once call connects.
             * @param {bool|null} record [Optional] Specifies if the conference should be recorded.
             * @param {string|null} recordCallBackUrl [Optional] Recording parameters will be sent here upon
             * completion.
             * @param {string|null} recordCallBackMethod [Optional] Specifies the HTTP method used to request the
             * required URL once conference connects.
             * @param {string|null} scheduleTime [Optional] Schedule conference in future. Schedule time must be
             * greater than current time
             * @param {int|null} timeout [Optional] The number of seconds the call stays on the line while waiting
             * for an answer. The max time limit is 999 and the default limit is 60
             * seconds but lower times can be set.
             *
             * @return {promise<String>}
             */
            createConference: function (url,
                from,
                to,
                method,
                statusCallBackUrl,
                statusCallBackMethod,
                fallbackUrl,
                fallbackMethod,
                record,
                recordCallBackUrl,
                recordCallBackMethod,
                scheduleTime,
                timeout)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/createConference.json';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'Url': url
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'From': from,
                    'To': to,
                    'Method': method,
                    'StatusCallBackUrl': statusCallBackUrl,
                    'StatusCallBackMethod': statusCallBackMethod,
                    'FallbackUrl': fallbackUrl,
                    'FallbackMethod': fallbackMethod,
                    'Record': record,
                    'RecordCallBackUrl': recordCallBackUrl,
                    'RecordCallBackMethod': recordCallBackMethod,
                    'ScheduleTime': scheduleTime,
                    'Timeout': timeout
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of participants for an in-progress conference.
             *
             * @param {string} conferenceSid The unique identifier for a conference.
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] The count of objects to return per page.
             * @param {bool|null} muted [Optional] Specifies if participant should be muted.
             * @param {bool|null} deaf [Optional] Specifies if the participant should hear audio in the conference.
             *
             * @return {promise<String>}
             */
            createListParticipants: function (conferenceSid, page, pagesize, muted, deaf) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/listParticipant.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'ConferenceSid': conferenceSid,
                    'Page': page,
                    'Pagesize': pagesize,
                    'Muted': muted,
                    'Deaf': deaf
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of conference objects.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} friendlyName [Optional] Only return conferences with the specified
             * FriendlyName
             * @param {string|null} dateCreated [Optional] Conference created date
             *
             * @return {promise<String>}
             */
            createListConferences: function (page, pagesize, friendlyName, dateCreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/conferences/listconference.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'FriendlyName': friendlyName,
                    'DateCreated': dateCreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
