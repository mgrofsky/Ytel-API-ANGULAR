/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('CallController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', 'BaseController', CallController
    ]);

    function CallController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Retrieve a single voice call’s information by its CallSid.
             *
             * @param {string} callSid The unique identifier for the voice call.
             *
             * @return {promise<String>}
             */
            createViewCall1: function (callSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/viewcalldetail.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'callSid': callSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a single voice call’s information by its CallSid.
             *
             * @param {string} callsid The unique identifier for the voice call.
             *
             * @return {promise<String>}
             */
            createViewCall: function (callsid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/viewcalls.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'callsid': callsid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Play Dtmf and send the Digit
             *
             * @param {string} callSid The unique identifier of each call resource
             * @param {string} playDtmf DTMF digits to play to the call. 0-9, #, *, W, or w
             * @param {PlayDtmfDirectionEnum|null} playDtmfDirection [Optional] The leg of the call DTMF digits
             * should be sent to
             *
             * @return {promise<String>}
             */
            createPlayDTMF: function (callSid, playDtmf, playDtmfDirection) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/senddigits.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'CallSid': callSid,
                    'PlayDtmf': playDtmf,
                    'PlayDtmfDirection': (playDtmfDirection !== null) ? playDtmfDirection : null
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * You can experiment with initiating a call through Ytel and view the request response generated when
             * doing so and get the response in json
             *
             * @param {string} from A valid Ytel Voice enabled number (E.164 format) that will be initiating the
             * phone call.
             * @param {string} to To number
             * @param {string} url URL requested once the call connects
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once call connects.
             * @param {string|null} statusCallBackUrl [Optional] URL that can be requested to receive notification
             * when call has ended. A set of default parameters will be sent
             * here once the call is finished.
             * @param {string|null} statusCallBackMethod [Optional] Specifies the HTTP methodlinkclass used to
             * request StatusCallbackUrl.
             * @param {string|null} fallBackUrl [Optional] URL requested if the initial Url parameter fails or
             * encounters an error
             * @param {string|null} fallBackMethod [Optional] Specifies the HTTP method used to request the
             * required FallbackUrl once call connects.
             * @param {string|null} heartBeatUrl [Optional] URL that can be requested every 60 seconds during the
             * call to notify of elapsed tim
             * @param {string|null} heartBeatMethod [Optional] Specifies the HTTP method used to request
             * HeartbeatUrl.
             * @param {int|null} timeout [Optional] Time (in seconds) Ytel should wait while the call is ringing
             * before canceling the call
             * @param {string|null} playDtmf [Optional] DTMF Digits to play to the call once it connects. 0-9, #,
             * or *
             * @param {bool|null} hideCallerId [Optional] Specifies if the caller id will be hidden
             * @param {bool|null} record [Optional] Specifies if the call should be recorded
             * @param {string|null} recordCallBackUrl [Optional] Recording parameters will be sent here upon
             * completion
             * @param {string|null} recordCallBackMethod [Optional] Method used to request the RecordCallback URL.
             * @param {bool|null} transcribe [Optional] Specifies if the call recording should be transcribed
             * @param {string|null} transcribeCallBackUrl [Optional] Transcription parameters will be sent here
             * upon completion
             * @param {IfMachineEnum|null} ifMachine [Optional] How Ytel should handle the receiving numbers
             * voicemail machine
             * @param {string|null} ifMachineUrl [Optional] URL requested when IfMachine=continue
             * @param {string|null} ifMachineMethod [Optional] Method used to request the IfMachineUrl.
             * @param {bool|null} feedback [Optional] Specify if survey should be enable or not
             * @param {string|null} surveyId [Optional] The unique identifier for the survey.
             *
             * @return {promise<String>}
             */
            createMakeCall: function (from,
                to,
                url,
                method,
                statusCallBackUrl,
                statusCallBackMethod,
                fallBackUrl,
                fallBackMethod,
                heartBeatUrl,
                heartBeatMethod,
                timeout,
                playDtmf,
                hideCallerId,
                record,
                recordCallBackUrl,
                recordCallBackMethod,
                transcribe,
                transcribeCallBackUrl,
                ifMachine,
                ifMachineUrl,
                ifMachineMethod,
                feedback,
                surveyId)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/makecall.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'From': from,
                    'To': to,
                    'Url': url,
                    'Method': method,
                    'StatusCallBackUrl': statusCallBackUrl,
                    'StatusCallBackMethod': statusCallBackMethod,
                    'FallBackUrl': fallBackUrl,
                    'FallBackMethod': fallBackMethod,
                    'HeartBeatUrl': heartBeatUrl,
                    'HeartBeatMethod': heartBeatMethod,
                    'Timeout': timeout,
                    'PlayDtmf': playDtmf,
                    'HideCallerId': hideCallerId,
                    'Record': record,
                    'RecordCallBackUrl': recordCallBackUrl,
                    'RecordCallBackMethod': recordCallBackMethod,
                    'Transcribe': transcribe,
                    'TranscribeCallBackUrl': transcribeCallBackUrl,
                    'IfMachine': (ifMachine !== null) ? ifMachine : null,
                    'IfMachineUrl': ifMachineUrl,
                    'IfMachineMethod': ifMachineMethod,
                    'Feedback': feedback,
                    'SurveyId': surveyId
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Play Audio from a url
             *
             * @param {string} callSid The unique identifier of each call resource
             * @param {string} audioUrl URL to sound that should be played. You also can add more than one audio
             * file using semicolons e.g. http://example.com/audio1.mp3;http://example.
             * com/audio2.wav
             * @param {string} sayText Valid alphanumeric string that should be played to the In-progress call.
             * @param {int|null} length [Optional] Time limit in seconds for audio play back
             * @param {DirectionEnum|null} direction [Optional] The leg of the call audio will be played to
             * @param {bool|null} mix [Optional] If false, all other audio will be muted
             *
             * @return {promise<String>}
             */
            createPlayAudio: function (callSid, audioUrl, sayText, length, direction, mix) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/playaudios.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'CallSid': callSid,
                    'AudioUrl': audioUrl,
                    'SayText': sayText,
                    'Length': length,
                    'Direction': (direction !== null) ? direction : null,
                    'Mix': mix
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Start or stop recording of an in-progress voice call.
             *
             * @param {string} callSid The unique identifier of each call resource
             * @param {bool} record Set true to initiate recording or false to terminate recording
             * @param {Direction4Enum|null} direction [Optional] The leg of the call to record
             * @param {int|null} timeLimit [Optional] Time in seconds the recording duration should not exceed
             * @param {string|null} callBackUrl [Optional] URL consulted after the recording completes
             * @param {FileformatEnum|null} fileformat [Optional] Format of the recording file. Can be .mp3 or .
             * wav
             *
             * @return {promise<String>}
             */
            createRecordCall: function (callSid, record, direction, timeLimit, callBackUrl, fileformat) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/recordcalls.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'CallSid': callSid,
                    'Record': record,
                    'Direction': (direction !== null) ? direction : null,
                    'TimeLimit': timeLimit,
                    'CallBackUrl': callBackUrl,
                    'Fileformat': (fileformat !== null) ? fileformat : null
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Add audio voice effects to the an in-progress voice call.
             *
             * @param {string} callSid The unique identifier for the in-progress voice call.
             * @param {AudioDirectionEnum|null} audioDirection [Optional] The direction the audio effect should be
             * placed on. If IN, the effects will occur on the
             * incoming audio stream. If OUT, the effects will
             * occur on the outgoing audio stream.
             * @param {double|null} pitchSemiTones [Optional] Set the pitch in semitone (half-step) intervals.
             * Value between -14 and 14
             * @param {double|null} pitchOctaves [Optional] Set the pitch in octave intervals.. Value between -1
             * and 1
             * @param {double|null} pitch [Optional] Set the pitch (lowness/highness) of the audio. The higher the
             * value, the higher the pitch. Value greater than 0
             * @param {double|null} rate [Optional] Set the rate for audio. The lower the value, the lower the rate.
             * value greater than 0
             * @param {double|null} tempo [Optional] Set the tempo (speed) of the audio. A higher value denotes a
             * faster tempo. Value greater than 0
             *
             * @return {promise<String>}
             */
            createVoiceEffect: function (callSid,
                audioDirection,
                pitchSemiTones,
                pitchOctaves,
                pitch,
                rate,
                tempo)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/voiceeffect.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'CallSid': callSid,
                    'AudioDirection': (audioDirection !== null) ? audioDirection : null,
                    'PitchSemiTones': pitchSemiTones,
                    'PitchOctaves': pitchOctaves,
                    'Pitch': pitch,
                    'Rate': rate,
                    'Tempo': tempo
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Interrupt the Call by Call Sid
             *
             * @param {string} callSid The unique identifier for voice call that is in progress.
             * @param {string|null} url [Optional] URL the in-progress call will be redirected to
             * @param {string|null} method [Optional] The method used to request the above Url parameter
             * @param {StatusEnum|null} status [Optional] Status to set the in-progress call to
             *
             * @return {promise<String>}
             */
            createInterruptCall: function (callSid, url, method, status) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/interruptcalls.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'CallSid': callSid,
                    'Url': url,
                    'Method': method,
                    'Status': (status !== null) ? status : null
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * A list of calls associated with your Ytel account
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pageSize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} to [Optional] Filter calls that were sent to this 10-digit number (E.164
             * format).
             * @param {string|null} from [Optional] Filter calls that were sent from this 10-digit number (E.164
             * format).
             * @param {string|null} dateCreated [Optional] Return calls that are from a specified date.
             *
             * @return {promise<String>}
             */
            createListCalls: function (page, pageSize, to, from, dateCreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/listcalls.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Page': page,
                    'PageSize': pageSize,
                    'To': to,
                    'From': from,
                    'DateCreated': dateCreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Initiate an outbound Ringless Voicemail through Ytel.
             *
             * @param {string} from A valid Ytel Voice enabled number (E.164 format) that will be initiating the
             * phone call.
             * @param {string} rVMCallerId A required secondary Caller ID for RVM to work.
             * @param {string} to A valid number (E.164 format) that will receive the phone call.
             * @param {string} voiceMailURL The URL requested once the RVM connects. A set of default parameters
             * will be sent here.
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once call connects.
             * @param {string|null} statusCallBackUrl [Optional] URL that can be requested to receive notification
             * when call has ended. A set of default parameters will be sent
             * here once the call is finished.
             * @param {string|null} statsCallBackMethod [Optional] Specifies the HTTP method used to request the
             * required StatusCallBackUrl once call connects.
             *
             * @return {promise<String>}
             */
            createSendRVM: function (from,
                rVMCallerId,
                to,
                voiceMailURL,
                method,
                statusCallBackUrl,
                statsCallBackMethod)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/makervm.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'From': from,
                    'RVMCallerId': rVMCallerId,
                    'To': to,
                    'VoiceMailURL': voiceMailURL,
                    'Method': method,
                    'StatusCallBackUrl': statusCallBackUrl,
                    'StatsCallBackMethod': statsCallBackMethod
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Group Call
             *
             * @param {string} from This number to display on Caller ID as calling
             * @param {string} to Please enter multiple E164 number. You can add max 10 numbers. Add numbers
             * separated with comma. e.g : 1111111111,2222222222
             * @param {string} url URL requested once the call connects
             * @param {string} groupConfirmKey Define the DTMF that the called party should send to bridge the call.
             * Allowed Values : 0-9, #, *
             * @param {GroupConfirmFileEnum} groupConfirmFile Specify the audio file you want to play when the
             * called party picks up the call
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once call connects.
             * @param {string|null} statusCallBackUrl [Optional] URL that can be requested to receive notification
             * when call has ended. A set of default parameters will be sent
             * here once the call is finished.
             * @param {string|null} statusCallBackMethod [Optional] Specifies the HTTP methodlinkclass used to
             * request StatusCallbackUrl.
             * @param {string|null} fallBackUrl [Optional] URL requested if the initial Url parameter fails or
             * encounters an error
             * @param {string|null} fallBackMethod [Optional] Specifies the HTTP method used to request the
             * required FallbackUrl once call connects.
             * @param {string|null} heartBeatUrl [Optional] URL that can be requested every 60 seconds during the
             * call to notify of elapsed time and pass other general information.
             * @param {string|null} heartBeatMethod [Optional] Specifies the HTTP method used to request
             * HeartbeatUrl.
             * @param {int|null} timeout [Optional] Time (in seconds) we should wait while the call is ringing
             * before canceling the call
             * @param {string|null} playDtmf [Optional] DTMF Digits to play to the call once it connects. 0-9, #,
             * or *
             * @param {string|null} hideCallerId [Optional] Specifies if the caller id will be hidden
             * @param {bool|null} record [Optional] Specifies if the call should be recorded
             * @param {string|null} recordCallBackUrl [Optional] Recording parameters will be sent here upon
             * completion
             * @param {string|null} recordCallBackMethod [Optional] Method used to request the RecordCallback URL.
             * @param {bool|null} transcribe [Optional] Specifies if the call recording should be transcribed
             * @param {string|null} transcribeCallBackUrl [Optional] Transcription parameters will be sent here
             * upon completion
             *
             * @return {promise<String>}
             */
            createGroupCall: function (from,
                to,
                url,
                groupConfirmKey,
                groupConfirmFile,
                method,
                statusCallBackUrl,
                statusCallBackMethod,
                fallBackUrl,
                fallBackMethod,
                heartBeatUrl,
                heartBeatMethod,
                timeout,
                playDtmf,
                hideCallerId,
                record,
                recordCallBackUrl,
                recordCallBackMethod,
                transcribe,
                transcribeCallBackUrl)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/calls/groupcall.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'From': from,
                    'To': to,
                    'Url': url,
                    'GroupConfirmKey': groupConfirmKey,
                    'GroupConfirmFile': (groupConfirmFile !== null) ? groupConfirmFile : null,
                    'Method': method,
                    'StatusCallBackUrl': statusCallBackUrl,
                    'StatusCallBackMethod': statusCallBackMethod,
                    'FallBackUrl': fallBackUrl,
                    'FallBackMethod': fallBackMethod,
                    'HeartBeatUrl': heartBeatUrl,
                    'HeartBeatMethod': heartBeatMethod,
                    'Timeout': timeout,
                    'PlayDtmf': playDtmf,
                    'HideCallerId': hideCallerId,
                    'Record': record,
                    'RecordCallBackUrl': recordCallBackUrl,
                    'RecordCallBackMethod': recordCallBackMethod,
                    'Transcribe': transcribe,
                    'TranscribeCallBackUrl': transcribeCallBackUrl
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
