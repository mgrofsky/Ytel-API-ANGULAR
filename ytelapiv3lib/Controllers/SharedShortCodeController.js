/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('SharedShortCodeController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        SharedShortCodeController
    ]);

    function SharedShortCodeController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * The response returned here contains all resource properties associated with the given Shortcode.
             *
             * @param {string} shortcode List of valid Shortcode to your Ytel account
             *
             * @return {promise<String>}
             */
            createViewShortcode: function (shortcode) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/viewshortcode.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * View a set of properties for a single keyword.
             *
             * @param {string} keywordid The unique identifier of each keyword
             *
             * @return {promise<String>}
             */
            createViewKeyword: function (keywordid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/keyword/view.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Keywordid': keywordid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * View a Shared ShortCode Template
             *
             * @param {uuid|string} templateId The unique identifier for a template object
             *
             * @return {promise<String>}
             */
            createViewTemplate: function (templateId) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/template/view.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'TemplateId': templateId
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * List All Inbound ShortCode
             *
             * @param {string|null} datecreated [Optional] Only list messages sent with the specified date
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} from [Optional] From Number to Inbound ShortCode
             * @param {string|null} shortcode [Optional] Only list messages sent to this Short Code
             *
             * @return {promise<String>}
             */
            createListInboundSMS: function (datecreated, page, pagesize, from, shortcode) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/getinboundsms.json';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'Datecreated': datecreated
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'from': from,
                    'Shortcode': shortcode
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Send an SMS from a Ytel ShortCode
             *
             * @param {string} shortcode The Short Code number that is the sender of this message
             * @param {string} to A valid 10-digit number that should receive the message
             * @param {uuid|string} templateid The unique identifier for the template used for the message
             * @param {string} data format of your data, example: {companyname}:test,{otpcode}:1234
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once the Short Code message is sent.
             * @param {string|null} messageStatusCallback [Optional] URL that can be requested to receive
             * notification when Short Code message was sent.
             *
             * @return {promise<String>}
             */
            createSendSMS: function (shortcode, to, templateid, data, method, messageStatusCallback) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/sendsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'shortcode': shortcode,
                    'to': to,
                    'templateid': templateid,
                    'data': data,
                    'Method': method,
                    'MessageStatusCallback': messageStatusCallback
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * List Shortcode Templates by Type
             *
             * @param {string|null} type [Optional] The type (category) of template Valid values: marketing,
             * authorization
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] The count of objects to return per page.
             * @param {string|null} shortcode [Optional] Only list templates of type
             *
             * @return {promise<String>}
             */
            createListTemplates: function (type, page, pagesize, shortcode) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/template/lists.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'type': type,
                    'page': page,
                    'pagesize': pagesize,
                    'Shortcode': shortcode
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of keywords associated with your Ytel account.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} keyword [Optional] Only list keywords of keyword
             * @param {int|null} shortcode [Optional] Only list keywords of shortcode
             *
             * @return {promise<String>}
             */
            createListKeywords: function (page, pagesize, keyword, shortcode) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/keyword/lists.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'Keyword': keyword,
                    'Shortcode': shortcode
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of shortcode assignment associated with your Ytel account.
             *
             * @param {string|null} shortcode [Optional] Only list keywords of shortcode
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] Number of individual resources listed in the response per
             * page
             *
             * @return {promise<String>}
             */
            createListShortcodes: function (shortcode, page, pagesize) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/listshortcode.json';
                
                // Process query parameters
                _queryBuilder = APIHelper.appendUrlWithQueryParameters(_queryBuilder, {
                    'Shortcode': shortcode
                });

                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Update Assignment
             *
             * @param {string} shortcode List of valid shortcode to your Ytel account
             * @param {string|null} friendlyName [Optional] User generated name of the shortcode
             * @param {string|null} callbackUrl [Optional] URL that can be requested to receive notification when
             * call has ended. A set of default parameters will be sent here once
             * the call is finished.
             * @param {string|null} callbackMethod [Optional] Specifies the HTTP method used to request the
             * required StatusCallBackUrl once call connects.
             * @param {string|null} fallbackUrl [Optional] URL used if any errors occur during execution of
             * InboundXML or at initial request of the required Url provided with
             * the POST.
             * @param {string|null} fallbackUrlMethod [Optional] Specifies the HTTP method used to request the
             * required FallbackUrl once call connects.
             *
             * @return {promise<String>}
             */
            updateShortcode: function (shortcode,
                friendlyName,
                callbackUrl,
                callbackMethod,
                fallbackUrl,
                fallbackUrlMethod)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/updateshortcode.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode,
                    'FriendlyName': friendlyName,
                    'CallbackUrl': callbackUrl,
                    'CallbackMethod': callbackMethod,
                    'FallbackUrl': fallbackUrl,
                    'FallbackUrlMethod': fallbackUrlMethod
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
