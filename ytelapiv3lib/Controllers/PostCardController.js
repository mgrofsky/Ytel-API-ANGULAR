/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('PostCardController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        PostCardController
    ]);

    function PostCardController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Remove a postcard object.
             *
             * @param {string} postcardid The unique identifier of a postcard object.
             *
             * @return {promise<String>}
             */
            createDeletePostcard: function (postcardid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/Postcard/deletepostcard.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'postcardid': postcardid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a postcard object by its PostcardId.
             *
             * @param {string} postcardid The unique identifier for a postcard object.
             *
             * @return {promise<String>}
             */
            createViewPostcard: function (postcardid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/Postcard/viewpostcard.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'postcardid': postcardid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Create, print, and mail a postcard to an address. The postcard front must be supplied as a PDF, image,
             * or an HTML string. The back can be a PDF, image, HTML string, or it can be automatically generated
             * by supplying a custom message.
             *
             * @param {string} to The AddressId or an object structured when creating an address by
             * addresses/Create.
             * @param {string} from The AddressId or an object structured when creating an address by
             * addresses/Create.
             * @param {string} attachbyid Set an existing postcard by attaching its PostcardId.
             * @param {string} front A 4.25"x6.25" or 6.25"x11.25" image to use as the front of the postcard.  This
             * can be a URL, local file, or an HTML string. Supported file types are PDF, PNG,
             * and JPEG.
             * @param {string} back A 4.25"x6.25" or 6.25"x11.25" image to use as the back of the postcard,
             * supplied as a URL, local file, or HTML string.  This allows you to customize
             * your back design, but we will still insert the recipient address for you.
             * @param {string} message The message for the back of the postcard with a maximum of 350 characters.
             * @param {string} setting Code for the dimensions of the media to be printed.
             * @param {string|null} description [Optional] A description for the postcard.
             * @param {string|null} htmldata [Optional] A string value that contains HTML markup.
             *
             * @return {promise<String>}
             */
            createPostcard: function (to, from, attachbyid, front, back, message, setting, description, htmldata) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/Postcard/createpostcard.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'to': to,
                    'from': from,
                    'attachbyid': attachbyid,
                    'front': front,
                    'back': back,
                    'message': message,
                    'setting': setting,
                    'description': description,
                    'htmldata': htmldata
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of postcard objects. The postcards objects are sorted by creation date, with the most
             * recently created postcards appearing first.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] The count of objects to return per page.
             * @param {string|null} postcardid [Optional] The unique identifier for a postcard object.
             * @param {string|null} dateCreated [Optional] The date the postcard was created.
             *
             * @return {promise<String>}
             */
            createListPostcards: function (page, pagesize, postcardid, dateCreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/Postcard/listpostcard.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'postcardid': postcardid,
                    'dateCreated': dateCreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
