/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('SMSController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', 'BaseController', SMSController
    ]);

    function SMSController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Retrieve a single SMS message object with details by its SmsSid.
             *
             * @param {string} messageSid The unique identifier for a sms message.
             *
             * @return {promise<String>}
             */
            createViewSMS1: function (messageSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/sms/viewdetailsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'MessageSid': messageSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a single SMS message object by its SmsSid.
             *
             * @param {string} messageSid The unique identifier for a sms message.
             *
             * @return {promise<String>}
             */
            createViewSMS: function (messageSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/sms/viewsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'MessageSid': messageSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Send an SMS from a Ytel number
             *
             * @param {string} from The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is
             * sent.
             * @param {string} to The 10-digit phone number (E.164 format) that will receive the message.
             * @param {string} body The body message that is to be sent in the text.
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once SMS sent.
             * @param {string|null} messageStatusCallback [Optional] URL that can be requested to receive
             * notification when SMS has Sent. A set of default
             * parameters will be sent here once the SMS is finished.
             * @param {bool|null} smartsms [Optional] Check's 'to' number can receive sms or not using Carrier API,
             * if wireless = true then text sms is sent, else wireless = false then
             * call is recieved to end user with audible message.
             * @param {bool|null} deliveryStatus [Optional] Delivery reports are a method to tell your system if
             * the message has arrived on the destination phone.
             *
             * @return {promise<String>}
             */
            createSendSMS: function (from, to, body, method, messageStatusCallback, smartsms, deliveryStatus) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/sms/sendsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'From': from,
                    'To': to,
                    'Body': body,
                    'Method': method,
                    'MessageStatusCallback': messageStatusCallback,
                    'Smartsms': smartsms,
                    'DeliveryStatus': deliveryStatus
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of Outbound SMS message objects.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pageSize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} from [Optional] Filter SMS message objects from this valid 10-digit phone
             * number (E.164 format).
             * @param {string|null} to [Optional] Filter SMS message objects to this valid 10-digit phone number (E.
             * 164 format).
             * @param {string|null} dateSent [Optional] Only list SMS messages sent in the specified date range
             *
             * @return {promise<String>}
             */
            createListSMS: function (page, pageSize, from, to, dateSent) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/sms/listsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Page': page,
                    'PageSize': pageSize,
                    'From': from,
                    'To': to,
                    'DateSent': dateSent
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of Inbound SMS message objects.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pageSize [Optional] The count of objects to return per page.
             * @param {string|null} from [Optional] Filter SMS message objects from this valid 10-digit phone
             * number (E.164 format).
             * @param {string|null} to [Optional] Filter SMS message objects to this valid 10-digit phone number (E.
             * 164 format).
             * @param {string|null} dateSent [Optional] Filter sms message objects by this date.
             *
             * @return {promise<String>}
             */
            createListInboundSMS: function (page, pageSize, from, to, dateSent) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/sms/getinboundsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Page': page,
                    'PageSize': pageSize,
                    'From': from,
                    'To': to,
                    'DateSent': dateSent
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
