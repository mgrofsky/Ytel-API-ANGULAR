/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('LetterController', ['$q', 'Configuration', 'HttpClient', 'APIHelper', 'BaseController', LetterController
    ]);

    function LetterController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Remove a letter object by its LetterId.
             *
             * @param {string} lettersid The unique identifier for a letter object.
             *
             * @return {promise<String>}
             */
            createDeleteLetter: function (lettersid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/letter/delete.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'lettersid': lettersid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a letter object by its LetterSid.
             *
             * @param {string} lettersid The unique identifier for a letter object.
             *
             * @return {promise<String>}
             */
            createViewLetter: function (lettersid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/letter/viewletter.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'lettersid': lettersid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Create, print, and mail a letter to an address. The letter file must be supplied as a PDF or an HTML
             * string.
             *
             * @param {string} to The AddressId or an object structured when creating an address by
             * addresses/Create.
             * @param {string} from The AddressId or an object structured when creating an address by
             * addresses/Create.
             * @param {string} attachbyid Set an existing letter by attaching its LetterId.
             * @param {string} file File can be a 8.5"x11" PDF uploaded file or URL that links to a file.
             * @param {string} color Specify if letter should be printed in color.
             * @param {string|null} description [Optional] A description for the letter.
             * @param {string|null} extraservice [Optional] Add an extra service to your letter. Options are
             * "certified" or "registered". Certified provides tracking and
             * delivery confirmation for domestic destinations and is an
             * additional $5.00. Registered provides tracking and confirmation
             * for international addresses and is an additional $16.50.
             * @param {string|null} doublesided [Optional] Specify if letter should be printed on both sides.
             * @param {string|null} template [Optional] Boolean that defaults to true. When set to false, this
             * specifies that your letter does not follow the m360 address template.
             * In this case, a blank address page will be inserted at the beginning
             * of your file and you will be charged for the extra page.
             * @param {string|null} htmldata [Optional] A string value that contains HTML markup.
             *
             * @return {promise<String>}
             */
            createLetter: function (to,
                from,
                attachbyid,
                file,
                color,
                description,
                extraservice,
                doublesided,
                template,
                htmldata)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/letter/create.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'to': to,
                    'from': from,
                    'attachbyid': attachbyid,
                    'file': file,
                    'color': color,
                    'description': description,
                    'extraservice': extraservice,
                    'doublesided': doublesided,
                    'template': template,
                    'htmldata': htmldata
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of letter objects. The letter objects are sorted by creation date, with the most
             * recently created letters appearing first.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] The count of objects to return per page.
             * @param {string|null} lettersid [Optional] The unique identifier for a letter object.
             * @param {string|null} dateCreated [Optional] The date the letter was created.
             *
             * @return {promise<String>}
             */
            createListLetters: function (page, pagesize, lettersid, dateCreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/letter/listsletter.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'lettersid': lettersid,
                    'dateCreated': dateCreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
