/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('ShortCodeController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        ShortCodeController
    ]);

    function ShortCodeController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Retrieve a list of Short Code assignment associated with your Ytel account.
             *
             * @param {string|null} shortcode [Optional] Only list Short Code Assignment sent from this Short Code
             * @param {string|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {string|null} pagesize [Optional] The count of objects to return per page.
             *
             * @return {promise<String>}
             */
            createListShortcodes: function (shortcode, page, pagesize) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/dedicatedshortcode/listshortcode.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode,
                    'page': page,
                    'pagesize': pagesize
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a single Short Code object by its shortcode assignment.
             *
             * @param {string} shortcode List of valid Dedicated Short Code to your Ytel account
             *
             * @return {promise<String>}
             */
            createViewSMS: function (shortcode) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/dedicatedshortcode/viewshortcode.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * View a single Sms Short Code message.
             *
             * @param {string} messageSid The unique identifier for the sms resource
             *
             * @return {promise<String>}
             */
            createViewSMS: function (messageSid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/viewsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'MessageSid': messageSid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of Short Code messages.
             *
             * @param {string|null} shortcode [Optional] Only list messages sent from this Short Code
             * @param {string|null} to [Optional] Only list messages sent to this number
             * @param {string|null} dateSent [Optional] Only list messages sent with the specified date
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pageSize [Optional] The count of objects to return per page.
             *
             * @return {promise<String>}
             */
            createListSMS: function (shortcode, to, dateSent, page, pageSize) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/shortcode/listsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode,
                    'To': to,
                    'DateSent': dateSent,
                    'Page': page,
                    'PageSize': pageSize
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Send Dedicated Shortcode
             *
             * @param {int} shortcode Your dedicated shortcode
             * @param {double} to The number to send your SMS to
             * @param {string} body The body of your message
             * @param {string|null} method [Optional] Specifies the HTTP method used to request the required URL
             * once the Short Code message is sent.GET or POST
             * @param {string|null} messagestatuscallback [Optional] URL that can be requested to receive
             * notification when Short Code message was sent.
             *
             * @return {promise<String>}
             */
            createSendSMS: function (shortcode, to, body, method, messagestatuscallback) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/dedicatedshortcode/sendsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'shortcode': shortcode,
                    'to': to,
                    'body': body,
                    'method': method,
                    'messagestatuscallback': messagestatuscallback
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrive a list of inbound Sms Short Code messages associated with your Ytel account.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] Number of individual resources listed in the response per
             * page
             * @param {string|null} from [Optional] Only list SMS messages sent from this number
             * @param {string|null} shortcode [Optional] Only list SMS messages sent to Shortcode
             * @param {string|null} datecreated [Optional] Only list SMS messages sent in the specified date MAKE
             * REQUEST
             *
             * @return {promise<String>}
             */
            createListInboundSMS: function (page, pagesize, from, shortcode, datecreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/dedicatedshortcode/getinboundsms.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'From': from,
                    'Shortcode': shortcode,
                    'Datecreated': datecreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Update a dedicated shortcode.
             *
             * @param {string} shortcode List of valid dedicated shortcode to your Ytel account.
             * @param {string|null} friendlyName [Optional] User generated name of the dedicated shortcode.
             * @param {string|null} callbackMethod [Optional] Specifies the HTTP method used to request the
             * required StatusCallBackUrl once call connects.
             * @param {string|null} callbackUrl [Optional] URL that can be requested to receive notification when
             * call has ended. A set of default parameters will be sent here once
             * the call is finished.
             * @param {string|null} fallbackMethod [Optional] Specifies the HTTP method used to request the
             * required FallbackUrl once call connects.
             * @param {string|null} fallbackUrl [Optional] URL used if any errors occur during execution of
             * InboundXML or at initial request of the required Url provided with
             * the POST.
             *
             * @return {promise<String>}
             */
            updateShortcode: function (shortcode,
                friendlyName,
                callbackMethod,
                callbackUrl,
                fallbackMethod,
                fallbackUrl)
            {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/dedicatedshortcode/updateshortcode.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'Shortcode': shortcode,
                    'FriendlyName': friendlyName,
                    'CallbackMethod': callbackMethod,
                    'CallbackUrl': callbackUrl,
                    'FallbackMethod': fallbackMethod,
                    'FallbackUrl': fallbackUrl
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
