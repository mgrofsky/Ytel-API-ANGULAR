/**
 * YtelAPIV3Lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

angular.module('YtelAPIV3Lib')
    .factory('AreaMailController', ['$q',
        'Configuration',
        'HttpClient',
        'APIHelper',
        'BaseController',
        AreaMailController
    ]);

    function AreaMailController($q, Configuration, HttpClient, APIHelper, BaseController) {
        return {
            /**
             * Remove an AreaMail object by its AreaMailId.
             *
             * @param {string} areamailid The unique identifier for an AreaMail object.
             *
             * @return {promise<String>}
             */
            createDeleteAreaMail: function (areamailid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/areamail/delete.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'areamailid': areamailid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve an AreaMail object by its AreaMailId.
             *
             * @param {string} areamailid The unique identifier for an AreaMail object.
             *
             * @return {promise<String>}
             */
            createViewAreaMail: function (areamailid) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/areamail/view.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'areamailid': areamailid
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Retrieve a list of AreaMail objects.
             *
             * @param {int|null} page [Optional] The page count to retrieve from the total results in the
             * collection. Page indexing starts at 1.
             * @param {int|null} pagesize [Optional] The count of objects to return per page.
             * @param {string|null} areamailsid [Optional] The unique identifier for an AreaMail object.
             * @param {string|null} dateCreated [Optional] The date the AreaMail was created.
             *
             * @return {promise<String>}
             */
            createListAreaMails: function (page, pagesize, areamailsid, dateCreated) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/areamail/lists.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'page': page,
                    'pagesize': pagesize,
                    'areamailsid': areamailsid,
                    'dateCreated': dateCreated
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            },
            /**
             * Create a new AreaMail object.
             *
             * @param {string} routes List of routes that AreaMail should be delivered to.  A single route can be
             * either a zipcode or a carrier route.List of routes that AreaMail should be
             * delivered to.  A single route can be either a zipcode or a carrier route. A
             * carrier route is in the form of 92610-C043 where the carrier route is
             * composed of 5 numbers for zipcode, 1 letter for carrier route type, and 3
             * numbers for carrier route code. Delivery can be sent to mutliple routes by
             * separating them with a commas. Valid Values: 92656, 92610-C043
             * @param {string} attachbyid Set an existing areamail by attaching its AreamailId.
             * @param {string} front The front of the AreaMail item to be created. This can be a URL, local file,
             * or an HTML string. Supported file types are PDF, PNG, and JPEG. Back required
             * @param {string} back The back of the AreaMail item to be created. This can be a URL, local file, or
             * an HTML string. Supported file types are PDF, PNG, and JPEG.
             * @param {string|null} description [Optional] A string value to use as a description for this AreaMail
             * item.
             * @param {string|null} targettype [Optional] The delivery location type.
             * @param {string|null} htmldata [Optional] A string value that contains HTML markup.
             *
             * @return {promise<String>}
             */
            createAreaMail: function (routes, attachbyid, front, back, description, targettype, htmldata) {

                //Create promise to return
                var _deffered = $q.defer();
                
                //prepare query string for API call
                var _baseUri = Configuration.BASEURI;
                var _queryBuilder = _baseUri + '/areamail/create.json';
                
                //validate and preprocess url
                var _queryUrl = APIHelper.cleanUrl(_queryBuilder);
                
                // prepare form data
                var _form = {
                    'routes': routes,
                    'attachbyid': attachbyid,
                    'front': front,
                    'back': back,
                    'description': description,
                    'targettype': targettype,
                    'htmldata': htmldata
                };

                // Remove null values
                APIHelper.cleanObject(_form);

                // prepare and invoke the API call request to fetch the response
                var _config = {
                    method: 'POST',
                    queryUrl: _queryUrl,
                    username: Configuration.basicAuthUserName,
                    password: Configuration.basicAuthPassword,
                    form: _form,
                };
                
                var _response = new HttpClient(_config);
                
                //process response
                _response.then(function success(_result) {
                    _deffered.resolve(_result);
                }, function error(_result){
                    // Error handling for custom HTTP status codes
                    _deffered.reject(APIHelper.appendContext({
                        errorMessage:'HTTP Response Not OK',
                        errorCode: _result.code,
                        errorResponse: _result.message
                    }, _result.getContext()));
                });
                
                return _deffered.promise;
            }
        };
    }

}(angular));
